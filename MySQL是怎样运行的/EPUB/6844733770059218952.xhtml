<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops" epub:prefix="z3998: http://www.daisy.org/z3998/2012/vocab/structure/#" lang="en" xml:lang="en">
  <head>
    <title>查询优化的百科全书 —— Explain 详解（下）</title>
  </head>
  <body><div class="markdown-body">
    <h1>查询优化的百科全书 —— Explain 详解（下）</h1>

    <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
    <link rel="stylesheet" href="style/style.css" type="text/css"/>

<div class="markdown-body">
    <h1>
 Explain 详解（下）
</h1>
<p>
 标签： MySQL 是怎样运行的
</p>
<hr/>
<h2>
 执行计划输出中各列详解
</h2>
<p>
 本章紧接着上一节的内容，继续唠叨
 <code>
  EXPLAIN
 </code>
 语句输出的各个列的意思。
</p>
<h3>
 Extra
</h3>
<p>
 顾名思义，
 <code>
  Extra
 </code>
 列是用来说明一些额外信息的，我们可以通过这些额外信息来更准确的理解
 <code>
  MySQL
 </code>
 到底将如何执行给定的查询语句。
 <code>
  MySQL
 </code>
 提供的额外信息有好几十个，我们就不一个一个介绍了（都介绍了感觉我们的文章就跟文档差不多了～），所以我们只挑一些平时常见的或者比较重要的额外信息介绍给大家哈。
</p>
<ul>
 <li>
  <p>
   <code>
    No tables used
   </code>
  </p>
  <p>
   当查询语句的没有
   <code>
    FROM
   </code>
   子句时将会提示该额外信息，比如：
  </p>
  <pre><code class="hljs language-sql">mysql<span class="hljs-operator">&gt;</span> EXPLAIN <span class="hljs-keyword">SELECT</span> <span class="hljs-number">1</span>;
<span class="hljs-operator">+</span><span class="hljs-comment">----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+----------------+</span>
<span class="hljs-operator">|</span> id <span class="hljs-operator">|</span> select_type <span class="hljs-operator">|</span> <span class="hljs-keyword">table</span> <span class="hljs-operator">|</span> partitions <span class="hljs-operator">|</span> type <span class="hljs-operator">|</span> possible_keys <span class="hljs-operator">|</span> key  <span class="hljs-operator">|</span> key_len <span class="hljs-operator">|</span> <span class="hljs-keyword">ref</span>  <span class="hljs-operator">|</span> <span class="hljs-keyword">rows</span> <span class="hljs-operator">|</span> filtered <span class="hljs-operator">|</span> Extra          <span class="hljs-operator">|</span>
<span class="hljs-operator">+</span><span class="hljs-comment">----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+----------------+</span>
<span class="hljs-operator">|</span>  <span class="hljs-number">1</span> <span class="hljs-operator">|</span> SIMPLE      <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>  <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>       <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>          <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>    <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span> <span class="hljs-operator">|</span>     <span class="hljs-keyword">NULL</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">No</span> tables used <span class="hljs-operator">|</span>
<span class="hljs-operator">+</span><span class="hljs-comment">----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+----------------+</span>
<span class="hljs-number">1</span> <span class="hljs-type">row</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span>, <span class="hljs-number">1</span> warning (<span class="hljs-number">0.00</span> sec)
</code></pre>
 </li>
 <li>
  <p>
   <code>
    Impossible WHERE
   </code>
  </p>
  <p>
   查询语句的
   <code>
    WHERE
   </code>
   子句永远为
   <code>
    FALSE
   </code>
   时将会提示该额外信息，比方说：
  </p>
  <pre><code class="hljs language-sql">mysql<span class="hljs-operator">&gt;</span> EXPLAIN <span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> s1 <span class="hljs-keyword">WHERE</span> <span class="hljs-number">1</span> <span class="hljs-operator">!=</span> <span class="hljs-number">1</span>;
<span class="hljs-operator">+</span><span class="hljs-comment">----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+------------------+</span>
<span class="hljs-operator">|</span> id <span class="hljs-operator">|</span> select_type <span class="hljs-operator">|</span> <span class="hljs-keyword">table</span> <span class="hljs-operator">|</span> partitions <span class="hljs-operator">|</span> type <span class="hljs-operator">|</span> possible_keys <span class="hljs-operator">|</span> key  <span class="hljs-operator">|</span> key_len <span class="hljs-operator">|</span> <span class="hljs-keyword">ref</span>  <span class="hljs-operator">|</span> <span class="hljs-keyword">rows</span> <span class="hljs-operator">|</span> filtered <span class="hljs-operator">|</span> Extra            <span class="hljs-operator">|</span>
<span class="hljs-operator">+</span><span class="hljs-comment">----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+------------------+</span>
<span class="hljs-operator">|</span>  <span class="hljs-number">1</span> <span class="hljs-operator">|</span> SIMPLE      <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>  <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>       <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>          <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>    <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span> <span class="hljs-operator">|</span>     <span class="hljs-keyword">NULL</span> <span class="hljs-operator">|</span> Impossible <span class="hljs-keyword">WHERE</span> <span class="hljs-operator">|</span>
<span class="hljs-operator">+</span><span class="hljs-comment">----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+------------------+</span>
<span class="hljs-number">1</span> <span class="hljs-type">row</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span>, <span class="hljs-number">1</span> warning (<span class="hljs-number">0.01</span> sec)
</code></pre>
 </li>
 <li>
  <p>
   <code>
    No matching min/max row
   </code>
  </p>
  <p>
   当查询列表处有
   <code>
    MIN
   </code>
   或者
   <code>
    MAX
   </code>
   聚集函数，但是并没有符合
   <code>
    WHERE
   </code>
   子句中的搜索条件的记录时，将会提示该额外信息，比方说：
  </p>
  <pre><code class="hljs language-sql">mysql<span class="hljs-operator">&gt;</span> EXPLAIN <span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">MIN</span>(key1) <span class="hljs-keyword">FROM</span> s1 <span class="hljs-keyword">WHERE</span> key1 <span class="hljs-operator">=</span> <span class="hljs-string">'abcdefg'</span>;
<span class="hljs-operator">+</span><span class="hljs-comment">----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-------------------------+</span>
<span class="hljs-operator">|</span> id <span class="hljs-operator">|</span> select_type <span class="hljs-operator">|</span> <span class="hljs-keyword">table</span> <span class="hljs-operator">|</span> partitions <span class="hljs-operator">|</span> type <span class="hljs-operator">|</span> possible_keys <span class="hljs-operator">|</span> key  <span class="hljs-operator">|</span> key_len <span class="hljs-operator">|</span> <span class="hljs-keyword">ref</span>  <span class="hljs-operator">|</span> <span class="hljs-keyword">rows</span> <span class="hljs-operator">|</span> filtered <span class="hljs-operator">|</span> Extra                   <span class="hljs-operator">|</span>
<span class="hljs-operator">+</span><span class="hljs-comment">----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-------------------------+</span>
<span class="hljs-operator">|</span>  <span class="hljs-number">1</span> <span class="hljs-operator">|</span> SIMPLE      <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>  <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>       <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>          <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>    <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span> <span class="hljs-operator">|</span>     <span class="hljs-keyword">NULL</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">No</span> matching min<span class="hljs-operator">/</span>max <span class="hljs-type">row</span> <span class="hljs-operator">|</span>
<span class="hljs-operator">+</span><span class="hljs-comment">----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-------------------------+</span>
<span class="hljs-number">1</span> <span class="hljs-type">row</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span>, <span class="hljs-number">1</span> warning (<span class="hljs-number">0.00</span> sec)
</code></pre>
 </li>
 <li>
  <p>
   <code>
    Using index
   </code>
  </p>
  <p>
   当我们的查询列表以及搜索条件中只包含属于某个索引的列，也就是在可以使用索引覆盖的情况下，在
   <code>
    Extra
   </code>
   列将会提示该额外信息。比方说下边这个查询中只需要用到
   <code>
    idx_key1
   </code>
   而不需要回表操作：
  </p>
  <pre><code class="hljs language-sql">mysql<span class="hljs-operator">&gt;</span> EXPLAIN <span class="hljs-keyword">SELECT</span> key1 <span class="hljs-keyword">FROM</span> s1 <span class="hljs-keyword">WHERE</span> key1 <span class="hljs-operator">=</span> <span class="hljs-string">'a'</span>;
<span class="hljs-operator">+</span><span class="hljs-comment">----+-------------+-------+------------+------+---------------+----------+---------+-------+------+----------+-------------+</span>
<span class="hljs-operator">|</span> id <span class="hljs-operator">|</span> select_type <span class="hljs-operator">|</span> <span class="hljs-keyword">table</span> <span class="hljs-operator">|</span> partitions <span class="hljs-operator">|</span> type <span class="hljs-operator">|</span> possible_keys <span class="hljs-operator">|</span> key      <span class="hljs-operator">|</span> key_len <span class="hljs-operator">|</span> <span class="hljs-keyword">ref</span>   <span class="hljs-operator">|</span> <span class="hljs-keyword">rows</span> <span class="hljs-operator">|</span> filtered <span class="hljs-operator">|</span> Extra       <span class="hljs-operator">|</span>
<span class="hljs-operator">+</span><span class="hljs-comment">----+-------------+-------+------------+------+---------------+----------+---------+-------+------+----------+-------------+</span>
<span class="hljs-operator">|</span>  <span class="hljs-number">1</span> <span class="hljs-operator">|</span> SIMPLE      <span class="hljs-operator">|</span> s1    <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>       <span class="hljs-operator">|</span> <span class="hljs-keyword">ref</span>  <span class="hljs-operator">|</span> idx_key1      <span class="hljs-operator">|</span> idx_key1 <span class="hljs-operator">|</span> <span class="hljs-number">303</span>     <span class="hljs-operator">|</span> const <span class="hljs-operator">|</span>    <span class="hljs-number">8</span> <span class="hljs-operator">|</span>   <span class="hljs-number">100.00</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">Using</span> index <span class="hljs-operator">|</span>
<span class="hljs-operator">+</span><span class="hljs-comment">----+-------------+-------+------------+------+---------------+----------+---------+-------+------+----------+-------------+</span>
<span class="hljs-number">1</span> <span class="hljs-type">row</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span>, <span class="hljs-number">1</span> warning (<span class="hljs-number">0.00</span> sec)
</code></pre>
 </li>
 <li>
  <p>
   <code>
    Using index condition
   </code>
  </p>
  <p>
   有些搜索条件中虽然出现了索引列，但却并不能用来形成范围区间，也就是不能被用来减少需要扫描的记录数量，比如下边这个查询：
  </p>
  <pre><code class="hljs language-sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> s1 <span class="hljs-keyword">WHERE</span> key1 <span class="hljs-operator">&gt;</span> <span class="hljs-string">'z'</span> <span class="hljs-keyword">AND</span> key1 <span class="hljs-keyword">LIKE</span> <span class="hljs-string">'%a'</span>;
</code></pre>
  <p>
   其中的
   <code>
    key1 &gt; 'z'
   </code>
   可以用来形成范围区间，但是
   <code>
    key1 LIKE '%a'
   </code>
   却不能。我们知道
   <code>
    MySQL
   </code>
   服务器程序其实分为
   <code>
    server层
   </code>
   和
   <code>
    存储引擎层
   </code>
   ，在没有
   <code>
    索引条件下推
   </code>
   特性之前，
   <code>
    server
   </code>
   层生成执行计划后，是按照下边步骤来执行这个查询的：
  </p>
  <ul>
   <li>
    <p>
     <code>
      server
     </code>
     层首先调用存储引擎的接口定位到满足
     <code>
      key1 &gt; 'z'
     </code>
     的第一条记录。
    </p>
   </li>
   <li>
    <p>
     存储引擎根据
     <code>
      B+
     </code>
     树索引快速定位到该条二级索引记录后，根据该二级索引记录的主键值进行回表操作，将完整的用户记录返回给
     <code>
      server
     </code>
     层。
    </p>
   </li>
   <li>
    <p>
     <code>
      server层
     </code>
     再判断其他的搜索条件是否成立，如果成立则将其发送给客户端，否则的话跳过该记录，然后向存储引擎层要下一条记录。
    </p>
   </li>
   <li>
    <p>
     由于每条记录都有一个
     <code>
      next_record
     </code>
     的属性，根据该属性可以快速定位到符合
     <code>
      key1 &gt; 'z'
     </code>
     条件的下一条二级索引记录，再执行回表操作，将完整的用户记录返回给
     <code>
      server层
     </code>
     ，然后重复上一步骤，直到将索引
     <code>
      idx_key1
     </code>
     的范围区间
     <code>
      ('z', +∞)
     </code>
     的所有记录都扫描过为止。
    </p>
   </li>
  </ul>
  <p>
   这里头有个问题，虽然
   <code>
    key1 LIKE '%a'
   </code>
   不能被用于组成范围区间来减少需要被扫描的二级索引记录数量，但这个搜索条件毕竟只涉及到了
   <code>
    key1
   </code>
   列，而
   <code>
    key1
   </code>
   列是包含在索引
   <code>
    idx_key1
   </code>
   中的。所以设计
   <code>
    MySQL
   </code>
   的大叔尝试着改进了一下上边的执行步骤：
  </p>
  <ul>
   <li>
    <p>
     <code>
      server
     </code>
     层首先调用存储引擎的接口定位到满足
     <code>
      key1 &gt; 'z'
     </code>
     的第一条记录。
    </p>
   </li>
   <li>
    <p>
     存储引擎根据
     <code>
      B+
     </code>
     树索引快速定位到该条二级索引记录后，不着急回表，先判断一下所有关于
     <code>
      idx_key1
     </code>
     索引的条件是否成立，也就是
     <code>
      key1 &gt; 'z' AND key1 LIKE '%a'
     </code>
     是否成立，如果这些条件不成立，则直接跳过该二级索引记录，然后去找下一条二级索引记录；如果这些条件成立，则执行回表操作，将完整的用户记录返回给
     <code>
      server层
     </code>
     。
    </p>
   </li>
   <li>
    <p>
     <code>
      server层
     </code>
     再判断其他的搜索条件是否成立（本例中没有其他的搜索条件了），如果成立则将其发送给客户端，否则的话跳过该记录，然后向存储引擎层要下一条记录。
    </p>
   </li>
   <li>
    <p>
     由于每条记录都有一个
     <code>
      next_record
     </code>
     的属性，根据该属性可以快速定位到符合
     <code>
      key1 &gt; 'z'
     </code>
     条件的下一条二级索引记录，还是不着急进行回表操作，先判断一下所有关于
     <code>
      idx_key1
     </code>
     索引的条件是否成立，如果这些条件不成立，则直接跳过该二级索引记录，然后去找下一条二级索引记录；如果这些条件成立，则执行回表操作，将完整的用户记录返回给
     <code>
      server层
     </code>
     。然后重复上一步骤，直到将索引
     <code>
      idx_key1
     </code>
     的范围区间
     <code>
      ('z', +∞)
     </code>
     的所有记录都扫描过为止。
    </p>
   </li>
  </ul>
  <p>
   每次执行回表操作，都需要将一个聚簇索引页面加载到内存里，比较耗时，所以上述修改虽然只改进了一点点，但是可以省去好多回表操作的成本。设计
   <code>
    MySQL
   </code>
   的大叔们把他们的这个改进称之为
   <code>
    索引条件下推
   </code>
   （英文名：
   <code>
    Index Condition Pushdown
   </code>
   ）。
  </p>
  <p>
   如果在查询语句的执行过程中将要使用
   <code>
    索引条件下推
   </code>
   这个特性，在
   <code>
    Extra
   </code>
   列中将会显示
   <code>
    Using index condition
   </code>
   ，比如这样：
  </p>
  <pre><code class="hljs language-sql">mysql<span class="hljs-operator">&gt;</span> EXPLAIN <span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> s1 <span class="hljs-keyword">WHERE</span> key1 <span class="hljs-operator">&gt;</span> <span class="hljs-string">'z'</span> <span class="hljs-keyword">AND</span> key1 <span class="hljs-keyword">LIKE</span> <span class="hljs-string">'%b'</span>;
  <span class="hljs-operator">+</span><span class="hljs-comment">----+-------------+-------+------------+-------+---------------+----------+---------+------+------+----------+-----------------------+</span>
  <span class="hljs-operator">|</span> id <span class="hljs-operator">|</span> select_type <span class="hljs-operator">|</span> <span class="hljs-keyword">table</span> <span class="hljs-operator">|</span> partitions <span class="hljs-operator">|</span> type  <span class="hljs-operator">|</span> possible_keys <span class="hljs-operator">|</span> key      <span class="hljs-operator">|</span> key_len <span class="hljs-operator">|</span> <span class="hljs-keyword">ref</span>  <span class="hljs-operator">|</span> <span class="hljs-keyword">rows</span> <span class="hljs-operator">|</span> filtered <span class="hljs-operator">|</span> Extra                 <span class="hljs-operator">|</span>
  <span class="hljs-operator">+</span><span class="hljs-comment">----+-------------+-------+------------+-------+---------------+----------+---------+------+------+----------+-----------------------+</span>
  <span class="hljs-operator">|</span>  <span class="hljs-number">1</span> <span class="hljs-operator">|</span> SIMPLE      <span class="hljs-operator">|</span> s1    <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>       <span class="hljs-operator">|</span> <span class="hljs-keyword">range</span> <span class="hljs-operator">|</span> idx_key1      <span class="hljs-operator">|</span> idx_key1 <span class="hljs-operator">|</span> <span class="hljs-number">303</span>     <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span> <span class="hljs-operator">|</span>  <span class="hljs-number">266</span> <span class="hljs-operator">|</span>   <span class="hljs-number">100.00</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">Using</span> index <span class="hljs-keyword">condition</span> <span class="hljs-operator">|</span>
  <span class="hljs-operator">+</span><span class="hljs-comment">----+-------------+-------+------------+-------+---------------+----------+---------+------+------+----------+-----------------------+</span>
  <span class="hljs-number">1</span> <span class="hljs-type">row</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span>, <span class="hljs-number">1</span> warning (<span class="hljs-number">0.01</span> sec)
</code></pre>
  <p>
   不过这里有一个问题大家得注意一下，我们说本例中在使用
   <code>
    索引条件下推
   </code>
   特性时，在存储引擎层获取到一条二级索引记录后，需要在存储引擎层继续判断
   <code>
    key1 &gt; 'z' AND key1 LIKE '%a'
   </code>
   是否成立。可是
   <code>
    key1 &gt; 'z'
   </code>
   这个条件不是用来生成范围区间的么，怎么这里还要在存储引擎层作为
   <code>
    索引条件下推
   </code>
   的条件再判断一遍呢？这里我猜是设计
   <code>
    MySQL
   </code>
   的大叔为了编码方便而做的一种冗余处理，多判断一遍也没啥大影响（是的，我也是猜的，并没有找到什么直接关于这个问题的说明）。其实即使我们的查询条件中只保留
   <code>
    key1 &gt; 'z'
   </code>
   这个条件，也是会将其作为
   <code>
    索引条件下推
   </code>
   中的条件来在存储引擎中判断一遍的，我们来看执行计划（注意看
   <code>
    Extra
   </code>
   列提示了
   <code>
    Using index condition
   </code>
   ）：
  </p>
  <pre><code class="hljs language-sql">mysql<span class="hljs-operator">&gt;</span> EXPLAIN <span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> s1 <span class="hljs-keyword">WHERE</span> key1 <span class="hljs-operator">&gt;</span> <span class="hljs-string">'z'</span>;
<span class="hljs-operator">+</span><span class="hljs-comment">----+-------------+-------+------------+-------+---------------+----------+---------+------+------+----------+-----------------------+</span>
<span class="hljs-operator">|</span> id <span class="hljs-operator">|</span> select_type <span class="hljs-operator">|</span> <span class="hljs-keyword">table</span> <span class="hljs-operator">|</span> partitions <span class="hljs-operator">|</span> type  <span class="hljs-operator">|</span> possible_keys <span class="hljs-operator">|</span> key      <span class="hljs-operator">|</span> key_len <span class="hljs-operator">|</span> <span class="hljs-keyword">ref</span>  <span class="hljs-operator">|</span> <span class="hljs-keyword">rows</span> <span class="hljs-operator">|</span> filtered <span class="hljs-operator">|</span> Extra                 <span class="hljs-operator">|</span>
<span class="hljs-operator">+</span><span class="hljs-comment">----+-------------+-------+------------+-------+---------------+----------+---------+------+------+----------+-----------------------+</span>
<span class="hljs-operator">|</span>  <span class="hljs-number">1</span> <span class="hljs-operator">|</span> SIMPLE      <span class="hljs-operator">|</span> s1    <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>       <span class="hljs-operator">|</span> <span class="hljs-keyword">range</span> <span class="hljs-operator">|</span> idx_key1      <span class="hljs-operator">|</span> idx_key1 <span class="hljs-operator">|</span> <span class="hljs-number">303</span>     <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span> <span class="hljs-operator">|</span>  <span class="hljs-number">266</span> <span class="hljs-operator">|</span>   <span class="hljs-number">100.00</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">Using</span> index <span class="hljs-keyword">condition</span> <span class="hljs-operator">|</span>
<span class="hljs-operator">+</span><span class="hljs-comment">----+-------------+-------+------------+-------+---------------+----------+---------+------+------+----------+-----------------------+</span>
<span class="hljs-number">1</span> <span class="hljs-type">row</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span>, <span class="hljs-number">1</span> warning (<span class="hljs-number">0.02</span> sec)
</code></pre>
  <p>
   但是设计
   <code>
    MySQL
   </code>
   的大叔在代码中对形成范围区间的等值匹配条件又做了特殊处理，它们是不作为
   <code>
    索引条件下推
   </code>
   中的条件在存储引擎中重复判断一遍的，比方说（注意看
   <code>
    Extra
   </code>
   列没有提示
   <code>
    Using index condition
   </code>
   ）：
  </p>
  <pre><code class="hljs language-sql">mysql<span class="hljs-operator">&gt;</span> EXPLAIN <span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> s1 <span class="hljs-keyword">WHERE</span> key1 <span class="hljs-operator">=</span> <span class="hljs-string">'a'</span>;
<span class="hljs-operator">+</span><span class="hljs-comment">----+-------------+-------+------------+------+---------------+----------+---------+-------+------+----------+-------+</span>
<span class="hljs-operator">|</span> id <span class="hljs-operator">|</span> select_type <span class="hljs-operator">|</span> <span class="hljs-keyword">table</span> <span class="hljs-operator">|</span> partitions <span class="hljs-operator">|</span> type <span class="hljs-operator">|</span> possible_keys <span class="hljs-operator">|</span> key      <span class="hljs-operator">|</span> key_len <span class="hljs-operator">|</span> <span class="hljs-keyword">ref</span>   <span class="hljs-operator">|</span> <span class="hljs-keyword">rows</span> <span class="hljs-operator">|</span> filtered <span class="hljs-operator">|</span> Extra <span class="hljs-operator">|</span>
<span class="hljs-operator">+</span><span class="hljs-comment">----+-------------+-------+------------+------+---------------+----------+---------+-------+------+----------+-------+</span>
<span class="hljs-operator">|</span>  <span class="hljs-number">1</span> <span class="hljs-operator">|</span> SIMPLE      <span class="hljs-operator">|</span> s1    <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>       <span class="hljs-operator">|</span> <span class="hljs-keyword">ref</span>  <span class="hljs-operator">|</span> idx_key1      <span class="hljs-operator">|</span> idx_key1 <span class="hljs-operator">|</span> <span class="hljs-number">303</span>     <span class="hljs-operator">|</span> const <span class="hljs-operator">|</span>    <span class="hljs-number">8</span> <span class="hljs-operator">|</span>   <span class="hljs-number">100.00</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>  <span class="hljs-operator">|</span>
<span class="hljs-operator">+</span><span class="hljs-comment">----+-------------+-------+------------+------+---------------+----------+---------+-------+------+----------+-------+</span>
<span class="hljs-number">1</span> <span class="hljs-type">row</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span>, <span class="hljs-number">1</span> warning (<span class="hljs-number">0.03</span> sec)
</code></pre>
  <p>
   有同学会想：为什么我们要把形成范围区间的条件作不作为
   <code>
    索引条件下推
   </code>
   中的条件的情况说的这么细呢，烦不烦啊，对我们用户没啥影响啊，不就是有的情况下重复判断一下么？哈哈，这主要是为了后边的加锁章节做的一个铺垫，后边用到的时候我们会更加展开来说的。
  </p>
  <p>
   另外还有一点需要注意的是，
   <code>
    索引条件下推
   </code>
   这个特性只是为了在扫描某个范围区间的二级索引记录时，能尽可能减少回表次数，从而减少
   <code>
    IO
   </code>
   操作。而对于
   <code>
    聚簇索引
   </code>
   而言不需要回表，它本身就包含着全部的列，也起不到减少
   <code>
    IO
   </code>
   操作的作用，所以设计
   <code>
    InnoDB
   </code>
   的大叔们规定这个
   <code>
    索引条件下推
   </code>
   特性只适用于二级索引。
  </p>
 </li>
 <li>
  <p>
   <code>
    Using where
   </code>
  </p>
  <p>
   当某个搜索条件需要在
   <code>
    server层
   </code>
   进行判断时，在
   <code>
    Extra
   </code>
   列中会提示
   <code>
    Using where
   </code>
   。比如下边这个查询：
  </p>
  <pre><code class="hljs language-sql">mysql<span class="hljs-operator">&gt;</span> EXPLAIN <span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> s1 <span class="hljs-keyword">WHERE</span> common_field <span class="hljs-operator">=</span> <span class="hljs-string">'a'</span>;
<span class="hljs-operator">+</span><span class="hljs-comment">----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-------------+</span>
<span class="hljs-operator">|</span> id <span class="hljs-operator">|</span> select_type <span class="hljs-operator">|</span> <span class="hljs-keyword">table</span> <span class="hljs-operator">|</span> partitions <span class="hljs-operator">|</span> type <span class="hljs-operator">|</span> possible_keys <span class="hljs-operator">|</span> key  <span class="hljs-operator">|</span> key_len <span class="hljs-operator">|</span> <span class="hljs-keyword">ref</span>  <span class="hljs-operator">|</span> <span class="hljs-keyword">rows</span> <span class="hljs-operator">|</span> filtered <span class="hljs-operator">|</span> Extra       <span class="hljs-operator">|</span>
<span class="hljs-operator">+</span><span class="hljs-comment">----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-------------+</span>
<span class="hljs-operator">|</span>  <span class="hljs-number">1</span> <span class="hljs-operator">|</span> SIMPLE      <span class="hljs-operator">|</span> s1    <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>       <span class="hljs-operator">|</span> <span class="hljs-keyword">ALL</span>  <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>          <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>    <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span> <span class="hljs-operator">|</span> <span class="hljs-number">9688</span> <span class="hljs-operator">|</span>    <span class="hljs-number">10.00</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">Using</span> <span class="hljs-keyword">where</span> <span class="hljs-operator">|</span>
<span class="hljs-operator">+</span><span class="hljs-comment">----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-------------+</span>
<span class="hljs-number">1</span> <span class="hljs-type">row</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span>, <span class="hljs-number">1</span> warning (<span class="hljs-number">0.01</span> sec)
</code></pre>
  <p>
   对于聚簇索引来说，是用不到
   <code>
    索引条件下推
   </code>
   特性的，所以所有的搜索条件都得在
   <code>
    server层
   </code>
   进行处理，也就是说本例中的
   <code>
    common_field = 'a'
   </code>
   条件是在
   <code>
    server层
   </code>
   进行判断的，所以该语句的执行计划的
   <code>
    Extra
   </code>
   列才提示
   <code>
    Using where
   </code>
   。
  </p>
  <p>
   有的时候
   <code>
    MySQL
   </code>
   会扫描某个二级索引的一个范围区间的记录，比方说：
  </p>
  <pre><code class="hljs language-sql">mysql<span class="hljs-operator">&gt;</span> EXPLAIN <span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> s1 <span class="hljs-keyword">WHERE</span> key1 <span class="hljs-operator">=</span> <span class="hljs-string">'a'</span> <span class="hljs-keyword">AND</span> common_field <span class="hljs-operator">=</span> <span class="hljs-string">'a'</span>;
<span class="hljs-operator">+</span><span class="hljs-comment">----+-------------+-------+------------+------+---------------+----------+---------+-------+------+----------+-------------+</span>
<span class="hljs-operator">|</span> id <span class="hljs-operator">|</span> select_type <span class="hljs-operator">|</span> <span class="hljs-keyword">table</span> <span class="hljs-operator">|</span> partitions <span class="hljs-operator">|</span> type <span class="hljs-operator">|</span> possible_keys <span class="hljs-operator">|</span> key      <span class="hljs-operator">|</span> key_len <span class="hljs-operator">|</span> <span class="hljs-keyword">ref</span>   <span class="hljs-operator">|</span> <span class="hljs-keyword">rows</span> <span class="hljs-operator">|</span> filtered <span class="hljs-operator">|</span> Extra       <span class="hljs-operator">|</span>
<span class="hljs-operator">+</span><span class="hljs-comment">----+-------------+-------+------------+------+---------------+----------+---------+-------+------+----------+-------------+</span>
<span class="hljs-operator">|</span>  <span class="hljs-number">1</span> <span class="hljs-operator">|</span> SIMPLE      <span class="hljs-operator">|</span> s1    <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>       <span class="hljs-operator">|</span> <span class="hljs-keyword">ref</span>  <span class="hljs-operator">|</span> idx_key1      <span class="hljs-operator">|</span> idx_key1 <span class="hljs-operator">|</span> <span class="hljs-number">303</span>     <span class="hljs-operator">|</span> const <span class="hljs-operator">|</span>    <span class="hljs-number">8</span> <span class="hljs-operator">|</span>    <span class="hljs-number">10.00</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">Using</span> <span class="hljs-keyword">where</span> <span class="hljs-operator">|</span>
<span class="hljs-operator">+</span><span class="hljs-comment">----+-------------+-------+------------+------+---------------+----------+---------+-------+------+----------+-------------+</span>
<span class="hljs-number">1</span> <span class="hljs-type">row</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span>, <span class="hljs-number">1</span> warning (<span class="hljs-number">0.00</span> sec)
</code></pre>
  <p>
   从执行计划中可以看出来，这个语句执行时将会使用到
   <code>
    idx_key1
   </code>
   二级索引，但是由于该索引并不包含
   <code>
    common_field
   </code>
   这个列，也就是说该条件不能作为
   <code>
    索引条件下推
   </code>
   的条件在存储引擎层进行判断，存储引擎需要根据二级索引记录执行回表操作后，将完整的用户记录返回给
   <code>
    server层
   </code>
   之后，在
   <code>
    server层
   </code>
   再判断这个条件是否成立，所以本例中的
   <code>
    Extra
   </code>
   列也显示了
   <code>
    Using where
   </code>
   的提示。
  </p>
 </li>
 <li>
  <p>
   <code>
    Using join buffer (Block Nested Loop)
   </code>
  </p>
  <p>
   在连接查询执行过程中，当被驱动表不能有效的利用索引加快访问速度，
   <code>
    MySQL
   </code>
   一般会为其分配一块名叫
   <code>
    join buffer
   </code>
   的内存块来加快查询速度，也就是我们所讲的
   <code>
    基于块的嵌套循环算法
   </code>
   ，比如下边这个查询语句：
  </p>
  <pre><code class="hljs language-sql">mysql<span class="hljs-operator">&gt;</span> EXPLAIN <span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> s1 <span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> s2 <span class="hljs-keyword">ON</span> s1.common_field <span class="hljs-operator">=</span> s2.common_field;
<span class="hljs-operator">+</span><span class="hljs-comment">----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+----------------------------------------------------+</span>
<span class="hljs-operator">|</span> id <span class="hljs-operator">|</span> select_type <span class="hljs-operator">|</span> <span class="hljs-keyword">table</span> <span class="hljs-operator">|</span> partitions <span class="hljs-operator">|</span> type <span class="hljs-operator">|</span> possible_keys <span class="hljs-operator">|</span> key  <span class="hljs-operator">|</span> key_len <span class="hljs-operator">|</span> <span class="hljs-keyword">ref</span>  <span class="hljs-operator">|</span> <span class="hljs-keyword">rows</span> <span class="hljs-operator">|</span> filtered <span class="hljs-operator">|</span> Extra                                              <span class="hljs-operator">|</span>
<span class="hljs-operator">+</span><span class="hljs-comment">----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+----------------------------------------------------+</span>
<span class="hljs-operator">|</span>  <span class="hljs-number">1</span> <span class="hljs-operator">|</span> SIMPLE      <span class="hljs-operator">|</span> s1    <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>       <span class="hljs-operator">|</span> <span class="hljs-keyword">ALL</span>  <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>          <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>    <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span> <span class="hljs-operator">|</span> <span class="hljs-number">9688</span> <span class="hljs-operator">|</span>   <span class="hljs-number">100.00</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>                                               <span class="hljs-operator">|</span>
<span class="hljs-operator">|</span>  <span class="hljs-number">1</span> <span class="hljs-operator">|</span> SIMPLE      <span class="hljs-operator">|</span> s2    <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>       <span class="hljs-operator">|</span> <span class="hljs-keyword">ALL</span>  <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>          <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>    <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span> <span class="hljs-operator">|</span> <span class="hljs-number">9954</span> <span class="hljs-operator">|</span>    <span class="hljs-number">10.00</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">Using</span> <span class="hljs-keyword">where</span>; <span class="hljs-keyword">Using</span> <span class="hljs-keyword">join</span> buffer (Block Nested Loop) <span class="hljs-operator">|</span>
<span class="hljs-operator">+</span><span class="hljs-comment">----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+----------------------------------------------------+</span>
<span class="hljs-number">2</span> <span class="hljs-keyword">rows</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span>, <span class="hljs-number">1</span> warning (<span class="hljs-number">0.03</span> sec)
</code></pre>
  <p>
   可以在对
   <code>
    s2
   </code>
   表的执行计划的
   <code>
    Extra
   </code>
   列显示了两个提示：
  </p>
  <ul>
   <li>
    <p>
     <code>
      Using join buffer (Block Nested Loop)
     </code>
     ：这是因为对表
     <code>
      s2
     </code>
     的访问不能有效利用索引，只好退而求其次，使用
     <code>
      join buffer
     </code>
     来减少对
     <code>
      s2
     </code>
     表的访问次数，从而提高性能。
    </p>
   </li>
   <li>
    <p>
     <code>
      Using where
     </code>
     ：可以看到查询语句中有一个
     <code>
      s1.common_field = s2.common_field
     </code>
     条件，因为
     <code>
      s1
     </code>
     是驱动表，
     <code>
      s2
     </code>
     是被驱动表，所以在访问
     <code>
      s2
     </code>
     表时，
     <code>
      s1.common_field
     </code>
     的值已经确定下来了，所以实际上查询
     <code>
      s2
     </code>
     表的条件就是
     <code>
      s2.common_field = 一个常数
     </code>
     ，所以提示了
     <code>
      Using where
     </code>
     额外信息。
    </p>
   </li>
  </ul>
 </li>
 <li>
  <p>
   <code>
    Not exists
   </code>
  </p>
  <p>
   当我们使用左（外）连接时，如果
   <code>
    WHERE
   </code>
   子句中包含要求被驱动表的某个列等于
   <code>
    NULL
   </code>
   值的搜索条件，而且那个列又是不允许存储
   <code>
    NULL
   </code>
   值的，那么在该表的执行计划的
   <code>
    Extra
   </code>
   列就会提示
   <code>
    Not exists
   </code>
   额外信息，比如这样：
  </p>
  <pre><code class="hljs language-sql">mysql<span class="hljs-operator">&gt;</span> EXPLAIN <span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> s1 <span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">JOIN</span> s2 <span class="hljs-keyword">ON</span> s1.key1 <span class="hljs-operator">=</span> s2.key1 <span class="hljs-keyword">WHERE</span> s2.id <span class="hljs-keyword">IS</span> <span class="hljs-keyword">NULL</span>;
<span class="hljs-operator">+</span><span class="hljs-comment">----+-------------+-------+------------+------+---------------+----------+---------+-------------------+------+----------+-------------------------+</span>
<span class="hljs-operator">|</span> id <span class="hljs-operator">|</span> select_type <span class="hljs-operator">|</span> <span class="hljs-keyword">table</span> <span class="hljs-operator">|</span> partitions <span class="hljs-operator">|</span> type <span class="hljs-operator">|</span> possible_keys <span class="hljs-operator">|</span> key      <span class="hljs-operator">|</span> key_len <span class="hljs-operator">|</span> <span class="hljs-keyword">ref</span>               <span class="hljs-operator">|</span> <span class="hljs-keyword">rows</span> <span class="hljs-operator">|</span> filtered <span class="hljs-operator">|</span> Extra                   <span class="hljs-operator">|</span>
<span class="hljs-operator">+</span><span class="hljs-comment">----+-------------+-------+------------+------+---------------+----------+---------+-------------------+------+----------+-------------------------+</span>
<span class="hljs-operator">|</span>  <span class="hljs-number">1</span> <span class="hljs-operator">|</span> SIMPLE      <span class="hljs-operator">|</span> s1    <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>       <span class="hljs-operator">|</span> <span class="hljs-keyword">ALL</span>  <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>          <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>     <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>    <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>              <span class="hljs-operator">|</span> <span class="hljs-number">9688</span> <span class="hljs-operator">|</span>   <span class="hljs-number">100.00</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>                    <span class="hljs-operator">|</span>
<span class="hljs-operator">|</span>  <span class="hljs-number">1</span> <span class="hljs-operator">|</span> SIMPLE      <span class="hljs-operator">|</span> s2    <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>       <span class="hljs-operator">|</span> <span class="hljs-keyword">ref</span>  <span class="hljs-operator">|</span> idx_key1      <span class="hljs-operator">|</span> idx_key1 <span class="hljs-operator">|</span> <span class="hljs-number">303</span>     <span class="hljs-operator">|</span> xiaohaizi.s1.key1 <span class="hljs-operator">|</span>    <span class="hljs-number">1</span> <span class="hljs-operator">|</span>    <span class="hljs-number">10.00</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">Using</span> <span class="hljs-keyword">where</span>; <span class="hljs-keyword">Not</span> <span class="hljs-keyword">exists</span> <span class="hljs-operator">|</span>
<span class="hljs-operator">+</span><span class="hljs-comment">----+-------------+-------+------------+------+---------------+----------+---------+-------------------+------+----------+-------------------------+</span>
<span class="hljs-number">2</span> <span class="hljs-keyword">rows</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span>, <span class="hljs-number">1</span> warning (<span class="hljs-number">0.00</span> sec)
</code></pre>
  <p>
   上述查询中
   <code>
    s1
   </code>
   表是驱动表，
   <code>
    s2
   </code>
   表是被驱动表，
   <code>
    s2.id
   </code>
   列是不允许存储
   <code>
    NULL
   </code>
   值的，而
   <code>
    WHERE
   </code>
   子句中又包含
   <code>
    s2.id IS NULL
   </code>
   的搜索条件，这意味着必定是驱动表的记录在被驱动表中找不到匹配
   <code>
    ON
   </code>
   子句条件的记录才会把该驱动表的记录加入到最终的结果集，所以对于某条驱动表中的记录来说，如果能在被驱动表中找到1条符合
   <code>
    ON
   </code>
   子句条件的记录，那么该驱动表的记录就不会被加入到最终的结果集，也就是说我们
   <span>
    没有必要到被驱动表中找到全部符合ON子句条件的记录
   </span>
   ，这样可以稍微节省一点性能。
  </p>
  <pre><code class="hljs language-!">小贴士：

右（外）连接可以被转换为左（外）连接，所以就不提右（外）连接的情况了。
</code></pre>
 </li>
 <li>
  <p>
   <code>
    Using intersect(...)
   </code>
   、
   <code>
    Using union(...)
   </code>
   和
   <code>
    Using sort_union(...)
   </code>
  </p>
  <p>
   如果执行计划的
   <code>
    Extra
   </code>
   列出现了
   <code>
    Using intersect(...)
   </code>
   提示，说明准备使用
   <code>
    Intersect
   </code>
   索引合并的方式执行查询，括号中的
   <code>
    ...
   </code>
   表示需要进行索引合并的索引名称；如果出现了
   <code>
    Using union(...)
   </code>
   提示，说明准备使用
   <code>
    Union
   </code>
   索引合并的方式执行查询；出现了
   <code>
    Using sort_union(...)
   </code>
   提示，说明准备使用
   <code>
    Sort-Union
   </code>
   索引合并的方式执行查询。比如这个查询的执行计划：
  </p>
  <pre><code class="hljs language-sql">mysql<span class="hljs-operator">&gt;</span> EXPLAIN <span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> s1 <span class="hljs-keyword">WHERE</span> key1 <span class="hljs-operator">=</span> <span class="hljs-string">'a'</span> <span class="hljs-keyword">AND</span> key3 <span class="hljs-operator">=</span> <span class="hljs-string">'a'</span>;
<span class="hljs-operator">+</span><span class="hljs-comment">----+-------------+-------+------------+-------------+-------------------+-------------------+---------+------+------+----------+-------------------------------------------------+</span>
<span class="hljs-operator">|</span> id <span class="hljs-operator">|</span> select_type <span class="hljs-operator">|</span> <span class="hljs-keyword">table</span> <span class="hljs-operator">|</span> partitions <span class="hljs-operator">|</span> type        <span class="hljs-operator">|</span> possible_keys     <span class="hljs-operator">|</span> key               <span class="hljs-operator">|</span> key_len <span class="hljs-operator">|</span> <span class="hljs-keyword">ref</span>  <span class="hljs-operator">|</span> <span class="hljs-keyword">rows</span> <span class="hljs-operator">|</span> filtered <span class="hljs-operator">|</span> Extra                                           <span class="hljs-operator">|</span>
<span class="hljs-operator">+</span><span class="hljs-comment">----+-------------+-------+------------+-------------+-------------------+-------------------+---------+------+------+----------+-------------------------------------------------+</span>
<span class="hljs-operator">|</span>  <span class="hljs-number">1</span> <span class="hljs-operator">|</span> SIMPLE      <span class="hljs-operator">|</span> s1    <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>       <span class="hljs-operator">|</span> index_merge <span class="hljs-operator">|</span> idx_key1,idx_key3 <span class="hljs-operator">|</span> idx_key3,idx_key1 <span class="hljs-operator">|</span> <span class="hljs-number">303</span>,<span class="hljs-number">303</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span> <span class="hljs-operator">|</span>    <span class="hljs-number">1</span> <span class="hljs-operator">|</span>   <span class="hljs-number">100.00</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">Using</span> <span class="hljs-keyword">intersect</span>(idx_key3,idx_key1); <span class="hljs-keyword">Using</span> <span class="hljs-keyword">where</span> <span class="hljs-operator">|</span>
<span class="hljs-operator">+</span><span class="hljs-comment">----+-------------+-------+------------+-------------+-------------------+-------------------+---------+------+------+----------+-------------------------------------------------+</span>
<span class="hljs-number">1</span> <span class="hljs-type">row</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span>, <span class="hljs-number">1</span> warning (<span class="hljs-number">0.01</span> sec)
</code></pre>
  <p>
   其中
   <code>
    Extra
   </code>
   列就显示了
   <code>
    Using intersect(idx_key3,idx_key1)
   </code>
   ，表明
   <code>
    MySQL
   </code>
   即将使用
   <code>
    idx_key3
   </code>
   和
   <code>
    idx_key1
   </code>
   这两个索引进行
   <code>
    Intersect
   </code>
   索引合并的方式执行查询。
  </p>
  <pre><code class="hljs language-!">小贴士：

剩下两种类型的索引合并的Extra列信息就不一一举例子了，自己写个查询瞅瞅呗～
</code></pre>
 </li>
 <li>
  <p>
   <code>
    Zero limit
   </code>
  </p>
  <p>
   当我们的
   <code>
    LIMIT
   </code>
   子句的参数为
   <code>
    0
   </code>
   时，表示压根儿不打算从表中读出任何记录，将会提示该额外信息，比如这样：
  </p>
  <pre><code class="hljs language-sql">mysql<span class="hljs-operator">&gt;</span> EXPLAIN <span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> s1 LIMIT <span class="hljs-number">0</span>;
<span class="hljs-operator">+</span><span class="hljs-comment">----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+------------+</span>
<span class="hljs-operator">|</span> id <span class="hljs-operator">|</span> select_type <span class="hljs-operator">|</span> <span class="hljs-keyword">table</span> <span class="hljs-operator">|</span> partitions <span class="hljs-operator">|</span> type <span class="hljs-operator">|</span> possible_keys <span class="hljs-operator">|</span> key  <span class="hljs-operator">|</span> key_len <span class="hljs-operator">|</span> <span class="hljs-keyword">ref</span>  <span class="hljs-operator">|</span> <span class="hljs-keyword">rows</span> <span class="hljs-operator">|</span> filtered <span class="hljs-operator">|</span> Extra      <span class="hljs-operator">|</span>
<span class="hljs-operator">+</span><span class="hljs-comment">----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+------------+</span>
<span class="hljs-operator">|</span>  <span class="hljs-number">1</span> <span class="hljs-operator">|</span> SIMPLE      <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>  <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>       <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>          <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>    <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span> <span class="hljs-operator">|</span>     <span class="hljs-keyword">NULL</span> <span class="hljs-operator">|</span> Zero limit <span class="hljs-operator">|</span>
<span class="hljs-operator">+</span><span class="hljs-comment">----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+------------+</span>
<span class="hljs-number">1</span> <span class="hljs-type">row</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span>, <span class="hljs-number">1</span> warning (<span class="hljs-number">0.00</span> sec)
</code></pre>
 </li>
 <li>
  <p>
   <code>
    Using filesort
   </code>
  </p>
  <p>
   有一些情况下对结果集中的记录进行排序是可以使用到索引的，比如下边这个查询：
  </p>
  <pre><code class="hljs language-sql">mysql<span class="hljs-operator">&gt;</span> EXPLAIN <span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> s1 <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> key1 LIMIT <span class="hljs-number">10</span>;
<span class="hljs-operator">+</span><span class="hljs-comment">----+-------------+-------+------------+-------+---------------+----------+---------+------+------+----------+-------+</span>
<span class="hljs-operator">|</span> id <span class="hljs-operator">|</span> select_type <span class="hljs-operator">|</span> <span class="hljs-keyword">table</span> <span class="hljs-operator">|</span> partitions <span class="hljs-operator">|</span> type  <span class="hljs-operator">|</span> possible_keys <span class="hljs-operator">|</span> key      <span class="hljs-operator">|</span> key_len <span class="hljs-operator">|</span> <span class="hljs-keyword">ref</span>  <span class="hljs-operator">|</span> <span class="hljs-keyword">rows</span> <span class="hljs-operator">|</span> filtered <span class="hljs-operator">|</span> Extra <span class="hljs-operator">|</span>
<span class="hljs-operator">+</span><span class="hljs-comment">----+-------------+-------+------------+-------+---------------+----------+---------+------+------+----------+-------+</span>
<span class="hljs-operator">|</span>  <span class="hljs-number">1</span> <span class="hljs-operator">|</span> SIMPLE      <span class="hljs-operator">|</span> s1    <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>       <span class="hljs-operator">|</span> index <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>          <span class="hljs-operator">|</span> idx_key1 <span class="hljs-operator">|</span> <span class="hljs-number">303</span>     <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span> <span class="hljs-operator">|</span>   <span class="hljs-number">10</span> <span class="hljs-operator">|</span>   <span class="hljs-number">100.00</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>  <span class="hljs-operator">|</span>
<span class="hljs-operator">+</span><span class="hljs-comment">----+-------------+-------+------------+-------+---------------+----------+---------+------+------+----------+-------+</span>
<span class="hljs-number">1</span> <span class="hljs-type">row</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span>, <span class="hljs-number">1</span> warning (<span class="hljs-number">0.03</span> sec)
</code></pre>
  <p>
   这个查询语句可以利用
   <code>
    idx_key1
   </code>
   索引直接取出
   <code>
    key1
   </code>
   列的10条记录，然后再进行回表操作就好了。但是很多情况下排序操作无法使用到索引，只能在内存中（记录较少的时候）或者磁盘中（记录较多的时候）进行排序，设计
   <code>
    MySQL
   </code>
   的大叔把这种在内存中或者磁盘上进行排序的方式统称为文件排序（英文名：
   <code>
    filesort
   </code>
   ）。如果某个查询需要使用文件排序的方式执行查询，就会在执行计划的
   <code>
    Extra
   </code>
   列中显示
   <code>
    Using filesort
   </code>
   提示，比如这样：
  </p>
  <pre><code class="hljs language-sql">mysql<span class="hljs-operator">&gt;</span> EXPLAIN <span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> s1 <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> common_field LIMIT <span class="hljs-number">10</span>;
<span class="hljs-operator">+</span><span class="hljs-comment">----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+----------------+</span>
<span class="hljs-operator">|</span> id <span class="hljs-operator">|</span> select_type <span class="hljs-operator">|</span> <span class="hljs-keyword">table</span> <span class="hljs-operator">|</span> partitions <span class="hljs-operator">|</span> type <span class="hljs-operator">|</span> possible_keys <span class="hljs-operator">|</span> key  <span class="hljs-operator">|</span> key_len <span class="hljs-operator">|</span> <span class="hljs-keyword">ref</span>  <span class="hljs-operator">|</span> <span class="hljs-keyword">rows</span> <span class="hljs-operator">|</span> filtered <span class="hljs-operator">|</span> Extra          <span class="hljs-operator">|</span>
<span class="hljs-operator">+</span><span class="hljs-comment">----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+----------------+</span>
<span class="hljs-operator">|</span>  <span class="hljs-number">1</span> <span class="hljs-operator">|</span> SIMPLE      <span class="hljs-operator">|</span> s1    <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>       <span class="hljs-operator">|</span> <span class="hljs-keyword">ALL</span>  <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>          <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>    <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span> <span class="hljs-operator">|</span> <span class="hljs-number">9688</span> <span class="hljs-operator">|</span>   <span class="hljs-number">100.00</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">Using</span> filesort <span class="hljs-operator">|</span>
<span class="hljs-operator">+</span><span class="hljs-comment">----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+----------------+</span>
<span class="hljs-number">1</span> <span class="hljs-type">row</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span>, <span class="hljs-number">1</span> warning (<span class="hljs-number">0.00</span> sec)
</code></pre>
  <p>
   需要注意的是，如果查询中需要使用
   <code>
    filesort
   </code>
   的方式进行排序的记录非常多，那么这个过程是很耗费性能的，我们最好想办法将使用
   <code>
    文件排序
   </code>
   的执行方式改为使用索引进行排序。
  </p>
 </li>
 <li>
  <p>
   <code>
    Using temporary
   </code>
  </p>
  <p>
   在许多查询的执行过程中，
   <code>
    MySQL
   </code>
   可能会借助临时表来完成一些功能，比如去重、排序之类的，比如我们在执行许多包含
   <code>
    DISTINCT
   </code>
   、
   <code>
    GROUP BY
   </code>
   、
   <code>
    UNION
   </code>
   等子句的查询过程中，如果不能有效利用索引来完成查询，
   <code>
    MySQL
   </code>
   很有可能寻求通过建立内部的临时表来执行查询。如果查询中使用到了内部的临时表，在执行计划的
   <code>
    Extra
   </code>
   列将会显示
   <code>
    Using temporary
   </code>
   提示，比方说这样：
  </p>
  <pre><code class="hljs language-sql">mysql<span class="hljs-operator">&gt;</span> EXPLAIN <span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">DISTINCT</span> common_field <span class="hljs-keyword">FROM</span> s1;
<span class="hljs-operator">+</span><span class="hljs-comment">----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-----------------+</span>
<span class="hljs-operator">|</span> id <span class="hljs-operator">|</span> select_type <span class="hljs-operator">|</span> <span class="hljs-keyword">table</span> <span class="hljs-operator">|</span> partitions <span class="hljs-operator">|</span> type <span class="hljs-operator">|</span> possible_keys <span class="hljs-operator">|</span> key  <span class="hljs-operator">|</span> key_len <span class="hljs-operator">|</span> <span class="hljs-keyword">ref</span>  <span class="hljs-operator">|</span> <span class="hljs-keyword">rows</span> <span class="hljs-operator">|</span> filtered <span class="hljs-operator">|</span> Extra           <span class="hljs-operator">|</span>
<span class="hljs-operator">+</span><span class="hljs-comment">----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-----------------+</span>
<span class="hljs-operator">|</span>  <span class="hljs-number">1</span> <span class="hljs-operator">|</span> SIMPLE      <span class="hljs-operator">|</span> s1    <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>       <span class="hljs-operator">|</span> <span class="hljs-keyword">ALL</span>  <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>          <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>    <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span> <span class="hljs-operator">|</span> <span class="hljs-number">9688</span> <span class="hljs-operator">|</span>   <span class="hljs-number">100.00</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">Using</span> temporary <span class="hljs-operator">|</span>
<span class="hljs-operator">+</span><span class="hljs-comment">----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-----------------+</span>
<span class="hljs-number">1</span> <span class="hljs-type">row</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span>, <span class="hljs-number">1</span> warning (<span class="hljs-number">0.00</span> sec)
</code></pre>
  <p>
   再比如：
  </p>
  <pre><code class="hljs language-sql">mysql<span class="hljs-operator">&gt;</span> EXPLAIN <span class="hljs-keyword">SELECT</span> common_field, <span class="hljs-built_in">COUNT</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">AS</span> amount <span class="hljs-keyword">FROM</span> s1 <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> common_field;
<span class="hljs-operator">+</span><span class="hljs-comment">----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+---------------------------------+</span>
<span class="hljs-operator">|</span> id <span class="hljs-operator">|</span> select_type <span class="hljs-operator">|</span> <span class="hljs-keyword">table</span> <span class="hljs-operator">|</span> partitions <span class="hljs-operator">|</span> type <span class="hljs-operator">|</span> possible_keys <span class="hljs-operator">|</span> key  <span class="hljs-operator">|</span> key_len <span class="hljs-operator">|</span> <span class="hljs-keyword">ref</span>  <span class="hljs-operator">|</span> <span class="hljs-keyword">rows</span> <span class="hljs-operator">|</span> filtered <span class="hljs-operator">|</span> Extra                           <span class="hljs-operator">|</span>
<span class="hljs-operator">+</span><span class="hljs-comment">----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+---------------------------------+</span>
<span class="hljs-operator">|</span>  <span class="hljs-number">1</span> <span class="hljs-operator">|</span> SIMPLE      <span class="hljs-operator">|</span> s1    <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>       <span class="hljs-operator">|</span> <span class="hljs-keyword">ALL</span>  <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>          <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>    <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span> <span class="hljs-operator">|</span> <span class="hljs-number">9688</span> <span class="hljs-operator">|</span>   <span class="hljs-number">100.00</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">Using</span> temporary; <span class="hljs-keyword">Using</span> filesort <span class="hljs-operator">|</span>
<span class="hljs-operator">+</span><span class="hljs-comment">----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+---------------------------------+</span>
<span class="hljs-number">1</span> <span class="hljs-type">row</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span>, <span class="hljs-number">1</span> warning (<span class="hljs-number">0.00</span> sec)
</code></pre>
  <p>
   不知道大家注意到没有，上述执行计划的
   <code>
    Extra
   </code>
   列不仅仅包含
   <code>
    Using temporary
   </code>
   提示，还包含
   <code>
    Using filesort
   </code>
   提示，可是我们的查询语句中明明没有写
   <code>
    ORDER BY
   </code>
   子句呀？这是因为
   <code>
    MySQL
   </code>
   会在包含
   <code>
    GROUP BY
   </code>
   子句的查询中默认添加上
   <code>
    ORDER BY
   </code>
   子句，也就是说上述查询其实和下边这个查询等价：
  </p>
  <pre><code class="hljs language-vbnet">EXPLAIN <span class="hljs-keyword">SELECT</span> common_field, COUNT(*) <span class="hljs-keyword">AS</span> amount <span class="hljs-keyword">FROM</span> s1 <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> common_field <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> common_field;
</code></pre>
  <p>
   如果我们并不想为包含
   <code>
    GROUP BY
   </code>
   子句的查询进行排序，需要我们显式的写上
   <code>
    ORDER BY NULL
   </code>
   ，就像这样：
  </p>
  <pre><code class="hljs language-sql">mysql<span class="hljs-operator">&gt;</span> EXPLAIN <span class="hljs-keyword">SELECT</span> common_field, <span class="hljs-built_in">COUNT</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">AS</span> amount <span class="hljs-keyword">FROM</span> s1 <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> common_field <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> <span class="hljs-keyword">NULL</span>;
<span class="hljs-operator">+</span><span class="hljs-comment">----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-----------------+</span>
<span class="hljs-operator">|</span> id <span class="hljs-operator">|</span> select_type <span class="hljs-operator">|</span> <span class="hljs-keyword">table</span> <span class="hljs-operator">|</span> partitions <span class="hljs-operator">|</span> type <span class="hljs-operator">|</span> possible_keys <span class="hljs-operator">|</span> key  <span class="hljs-operator">|</span> key_len <span class="hljs-operator">|</span> <span class="hljs-keyword">ref</span>  <span class="hljs-operator">|</span> <span class="hljs-keyword">rows</span> <span class="hljs-operator">|</span> filtered <span class="hljs-operator">|</span> Extra           <span class="hljs-operator">|</span>
<span class="hljs-operator">+</span><span class="hljs-comment">----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-----------------+</span>
<span class="hljs-operator">|</span>  <span class="hljs-number">1</span> <span class="hljs-operator">|</span> SIMPLE      <span class="hljs-operator">|</span> s1    <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>       <span class="hljs-operator">|</span> <span class="hljs-keyword">ALL</span>  <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>          <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>    <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span> <span class="hljs-operator">|</span> <span class="hljs-number">9688</span> <span class="hljs-operator">|</span>   <span class="hljs-number">100.00</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">Using</span> temporary <span class="hljs-operator">|</span>
<span class="hljs-operator">+</span><span class="hljs-comment">----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-----------------+</span>
<span class="hljs-number">1</span> <span class="hljs-type">row</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span>, <span class="hljs-number">1</span> warning (<span class="hljs-number">0.00</span> sec)
</code></pre>
  <p>
   这回执行计划中就没有
   <code>
    Using filesort
   </code>
   的提示了，也就意味着执行查询时可以省去对记录进行文件排序的成本了。
  </p>
  <p>
   另外，执行计划中出现
   <code>
    Using temporary
   </code>
   并不是一个好的征兆，因为建立与维护临时表要付出很大成本的，所以我们最好能使用索引来替代掉使用临时表，比方说下边这个包含
   <code>
    GROUP BY
   </code>
   子句的查询就不需要使用临时表：
  </p>
  <pre><code class="hljs language-sql">mysql<span class="hljs-operator">&gt;</span> EXPLAIN <span class="hljs-keyword">SELECT</span> key1, <span class="hljs-built_in">COUNT</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">AS</span> amount <span class="hljs-keyword">FROM</span> s1 <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> key1;
<span class="hljs-operator">+</span><span class="hljs-comment">----+-------------+-------+------------+-------+---------------+----------+---------+------+------+----------+-------------+</span>
<span class="hljs-operator">|</span> id <span class="hljs-operator">|</span> select_type <span class="hljs-operator">|</span> <span class="hljs-keyword">table</span> <span class="hljs-operator">|</span> partitions <span class="hljs-operator">|</span> type  <span class="hljs-operator">|</span> possible_keys <span class="hljs-operator">|</span> key      <span class="hljs-operator">|</span> key_len <span class="hljs-operator">|</span> <span class="hljs-keyword">ref</span>  <span class="hljs-operator">|</span> <span class="hljs-keyword">rows</span> <span class="hljs-operator">|</span> filtered <span class="hljs-operator">|</span> Extra       <span class="hljs-operator">|</span>
<span class="hljs-operator">+</span><span class="hljs-comment">----+-------------+-------+------------+-------+---------------+----------+---------+------+------+----------+-------------+</span>
<span class="hljs-operator">|</span>  <span class="hljs-number">1</span> <span class="hljs-operator">|</span> SIMPLE      <span class="hljs-operator">|</span> s1    <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>       <span class="hljs-operator">|</span> index <span class="hljs-operator">|</span> idx_key1      <span class="hljs-operator">|</span> idx_key1 <span class="hljs-operator">|</span> <span class="hljs-number">303</span>     <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span> <span class="hljs-operator">|</span> <span class="hljs-number">9688</span> <span class="hljs-operator">|</span>   <span class="hljs-number">100.00</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">Using</span> index <span class="hljs-operator">|</span>
<span class="hljs-operator">+</span><span class="hljs-comment">----+-------------+-------+------------+-------+---------------+----------+---------+------+------+----------+-------------+</span>
<span class="hljs-number">1</span> <span class="hljs-type">row</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span>, <span class="hljs-number">1</span> warning (<span class="hljs-number">0.00</span> sec)
</code></pre>
  <p>
   从
   <code>
    Extra
   </code>
   的
   <code>
    Using index
   </code>
   的提示里我们可以看出，上述查询只需要扫描
   <code>
    idx_key1
   </code>
   索引就可以搞定了，不再需要临时表了。
  </p>
 </li>
 <li>
  <p>
   <code>
    Start temporary, End temporary
   </code>
  </p>
  <p>
   我们前边唠叨子查询的时候说过，查询优化器会优先尝试将
   <code>
    IN
   </code>
   子查询转换成
   <code>
    semi-join
   </code>
   ，而
   <code>
    semi-join
   </code>
   又有好多种执行策略，当执行策略为
   <code>
    DuplicateWeedout
   </code>
   时，也就是通过建立临时表来实现为外层查询中的记录进行去重操作时，驱动表查询执行计划的
   <code>
    Extra
   </code>
   列将显示
   <code>
    Start temporary
   </code>
   提示，被驱动表查询执行计划的
   <code>
    Extra
   </code>
   列将显示
   <code>
    End temporary
   </code>
   提示，就是这样：
  </p>
  <pre><code class="hljs language-sql">mysql<span class="hljs-operator">&gt;</span> EXPLAIN <span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> s1 <span class="hljs-keyword">WHERE</span> key1 <span class="hljs-keyword">IN</span> (<span class="hljs-keyword">SELECT</span> key3 <span class="hljs-keyword">FROM</span> s2 <span class="hljs-keyword">WHERE</span> common_field <span class="hljs-operator">=</span> <span class="hljs-string">'a'</span>);
<span class="hljs-operator">+</span><span class="hljs-comment">----+-------------+-------+------------+------+---------------+----------+---------+-------------------+------+----------+------------------------------+</span>
<span class="hljs-operator">|</span> id <span class="hljs-operator">|</span> select_type <span class="hljs-operator">|</span> <span class="hljs-keyword">table</span> <span class="hljs-operator">|</span> partitions <span class="hljs-operator">|</span> type <span class="hljs-operator">|</span> possible_keys <span class="hljs-operator">|</span> key      <span class="hljs-operator">|</span> key_len <span class="hljs-operator">|</span> <span class="hljs-keyword">ref</span>               <span class="hljs-operator">|</span> <span class="hljs-keyword">rows</span> <span class="hljs-operator">|</span> filtered <span class="hljs-operator">|</span> Extra                        <span class="hljs-operator">|</span>
<span class="hljs-operator">+</span><span class="hljs-comment">----+-------------+-------+------------+------+---------------+----------+---------+-------------------+------+----------+------------------------------+</span>
<span class="hljs-operator">|</span>  <span class="hljs-number">1</span> <span class="hljs-operator">|</span> SIMPLE      <span class="hljs-operator">|</span> s2    <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>       <span class="hljs-operator">|</span> <span class="hljs-keyword">ALL</span>  <span class="hljs-operator">|</span> idx_key3      <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>     <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>    <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>              <span class="hljs-operator">|</span> <span class="hljs-number">9954</span> <span class="hljs-operator">|</span>    <span class="hljs-number">10.00</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">Using</span> <span class="hljs-keyword">where</span>; <span class="hljs-keyword">Start</span> temporary <span class="hljs-operator">|</span>
<span class="hljs-operator">|</span>  <span class="hljs-number">1</span> <span class="hljs-operator">|</span> SIMPLE      <span class="hljs-operator">|</span> s1    <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>       <span class="hljs-operator">|</span> <span class="hljs-keyword">ref</span>  <span class="hljs-operator">|</span> idx_key1      <span class="hljs-operator">|</span> idx_key1 <span class="hljs-operator">|</span> <span class="hljs-number">303</span>     <span class="hljs-operator">|</span> xiaohaizi.s2.key3 <span class="hljs-operator">|</span>    <span class="hljs-number">1</span> <span class="hljs-operator">|</span>   <span class="hljs-number">100.00</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">End</span> temporary                <span class="hljs-operator">|</span>
<span class="hljs-operator">+</span><span class="hljs-comment">----+-------------+-------+------------+------+---------------+----------+---------+-------------------+------+----------+------------------------------+</span>
<span class="hljs-number">2</span> <span class="hljs-keyword">rows</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span>, <span class="hljs-number">1</span> warning (<span class="hljs-number">0.00</span> sec)
</code></pre>
 </li>
 <li>
  <p>
   <code>
    LooseScan
   </code>
  </p>
  <p>
   在将
   <code>
    In
   </code>
   子查询转为
   <code>
    semi-join
   </code>
   时，如果采用的是
   <code>
    LooseScan
   </code>
   执行策略，则在驱动表执行计划的
   <code>
    Extra
   </code>
   列就是显示
   <code>
    LooseScan
   </code>
   提示，比如这样：
  </p>
  <pre><code class="hljs language-sql">mysql<span class="hljs-operator">&gt;</span> EXPLAIN <span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> s1 <span class="hljs-keyword">WHERE</span> key3 <span class="hljs-keyword">IN</span> (<span class="hljs-keyword">SELECT</span> key1 <span class="hljs-keyword">FROM</span> s2 <span class="hljs-keyword">WHERE</span> key1 <span class="hljs-operator">&gt;</span> <span class="hljs-string">'z'</span>);
<span class="hljs-operator">+</span><span class="hljs-comment">----+-------------+-------+------------+-------+---------------+----------+---------+-------------------+------+----------+-------------------------------------+</span>
<span class="hljs-operator">|</span> id <span class="hljs-operator">|</span> select_type <span class="hljs-operator">|</span> <span class="hljs-keyword">table</span> <span class="hljs-operator">|</span> partitions <span class="hljs-operator">|</span> type  <span class="hljs-operator">|</span> possible_keys <span class="hljs-operator">|</span> key      <span class="hljs-operator">|</span> key_len <span class="hljs-operator">|</span> <span class="hljs-keyword">ref</span>               <span class="hljs-operator">|</span> <span class="hljs-keyword">rows</span> <span class="hljs-operator">|</span> filtered <span class="hljs-operator">|</span> Extra                               <span class="hljs-operator">|</span>
<span class="hljs-operator">+</span><span class="hljs-comment">----+-------------+-------+------------+-------+---------------+----------+---------+-------------------+------+----------+-------------------------------------+</span>
<span class="hljs-operator">|</span>  <span class="hljs-number">1</span> <span class="hljs-operator">|</span> SIMPLE      <span class="hljs-operator">|</span> s2    <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>       <span class="hljs-operator">|</span> <span class="hljs-keyword">range</span> <span class="hljs-operator">|</span> idx_key1      <span class="hljs-operator">|</span> idx_key1 <span class="hljs-operator">|</span> <span class="hljs-number">303</span>     <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>              <span class="hljs-operator">|</span>  <span class="hljs-number">270</span> <span class="hljs-operator">|</span>   <span class="hljs-number">100.00</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">Using</span> <span class="hljs-keyword">where</span>; <span class="hljs-keyword">Using</span> index; LooseScan <span class="hljs-operator">|</span>
<span class="hljs-operator">|</span>  <span class="hljs-number">1</span> <span class="hljs-operator">|</span> SIMPLE      <span class="hljs-operator">|</span> s1    <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>       <span class="hljs-operator">|</span> <span class="hljs-keyword">ref</span>   <span class="hljs-operator">|</span> idx_key3      <span class="hljs-operator">|</span> idx_key3 <span class="hljs-operator">|</span> <span class="hljs-number">303</span>     <span class="hljs-operator">|</span> xiaohaizi.s2.key1 <span class="hljs-operator">|</span>    <span class="hljs-number">1</span> <span class="hljs-operator">|</span>   <span class="hljs-number">100.00</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>                                <span class="hljs-operator">|</span>
<span class="hljs-operator">+</span><span class="hljs-comment">----+-------------+-------+------------+-------+---------------+----------+---------+-------------------+------+----------+-------------------------------------+</span>
<span class="hljs-number">2</span> <span class="hljs-keyword">rows</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span>, <span class="hljs-number">1</span> warning (<span class="hljs-number">0.01</span> sec)
</code></pre>
 </li>
 <li>
  <p>
   <code>
    FirstMatch(tbl_name)
   </code>
  </p>
  <p>
   在将
   <code>
    In
   </code>
   子查询转为
   <code>
    semi-join
   </code>
   时，如果采用的是
   <code>
    FirstMatch
   </code>
   执行策略，则在被驱动表执行计划的
   <code>
    Extra
   </code>
   列就是显示
   <code>
    FirstMatch(tbl_name)
   </code>
   提示，比如这样：
  </p>
  <pre><code class="hljs language-sql">mysql<span class="hljs-operator">&gt;</span> EXPLAIN <span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> s1 <span class="hljs-keyword">WHERE</span> common_field <span class="hljs-keyword">IN</span> (<span class="hljs-keyword">SELECT</span> key1 <span class="hljs-keyword">FROM</span> s2 <span class="hljs-keyword">where</span> s1.key3 <span class="hljs-operator">=</span> s2.key3);
<span class="hljs-operator">+</span><span class="hljs-comment">----+-------------+-------+------------+------+-------------------+----------+---------+-------------------+------+----------+-----------------------------+</span>
<span class="hljs-operator">|</span> id <span class="hljs-operator">|</span> select_type <span class="hljs-operator">|</span> <span class="hljs-keyword">table</span> <span class="hljs-operator">|</span> partitions <span class="hljs-operator">|</span> type <span class="hljs-operator">|</span> possible_keys     <span class="hljs-operator">|</span> key      <span class="hljs-operator">|</span> key_len <span class="hljs-operator">|</span> <span class="hljs-keyword">ref</span>               <span class="hljs-operator">|</span> <span class="hljs-keyword">rows</span> <span class="hljs-operator">|</span> filtered <span class="hljs-operator">|</span> Extra                       <span class="hljs-operator">|</span>
<span class="hljs-operator">+</span><span class="hljs-comment">----+-------------+-------+------------+------+-------------------+----------+---------+-------------------+------+----------+-----------------------------+</span>
<span class="hljs-operator">|</span>  <span class="hljs-number">1</span> <span class="hljs-operator">|</span> SIMPLE      <span class="hljs-operator">|</span> s1    <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>       <span class="hljs-operator">|</span> <span class="hljs-keyword">ALL</span>  <span class="hljs-operator">|</span> idx_key3          <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>     <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>    <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>              <span class="hljs-operator">|</span> <span class="hljs-number">9688</span> <span class="hljs-operator">|</span>   <span class="hljs-number">100.00</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">Using</span> <span class="hljs-keyword">where</span>                 <span class="hljs-operator">|</span>
<span class="hljs-operator">|</span>  <span class="hljs-number">1</span> <span class="hljs-operator">|</span> SIMPLE      <span class="hljs-operator">|</span> s2    <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>       <span class="hljs-operator">|</span> <span class="hljs-keyword">ref</span>  <span class="hljs-operator">|</span> idx_key1,idx_key3 <span class="hljs-operator">|</span> idx_key3 <span class="hljs-operator">|</span> <span class="hljs-number">303</span>     <span class="hljs-operator">|</span> xiaohaizi.s1.key3 <span class="hljs-operator">|</span>    <span class="hljs-number">1</span> <span class="hljs-operator">|</span>     <span class="hljs-number">4.87</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">Using</span> <span class="hljs-keyword">where</span>; FirstMatch(s1) <span class="hljs-operator">|</span>
<span class="hljs-operator">+</span><span class="hljs-comment">----+-------------+-------+------------+------+-------------------+----------+---------+-------------------+------+----------+-----------------------------+</span>
<span class="hljs-number">2</span> <span class="hljs-keyword">rows</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span>, <span class="hljs-number">2</span> warnings (<span class="hljs-number">0.00</span> sec)
</code></pre>
 </li>
</ul>
<h2>
 Json格式的执行计划
</h2>
<p>
 我们上边介绍的
 <code>
  EXPLAIN
 </code>
 语句输出中缺少了一个衡量执行计划好坏的重要属性 ——
 <span>
  成本
 </span>
 。不过设计
 <code>
  MySQL
 </code>
 的大叔贴心的为我们提供了一种查看某个执行计划花费的成本的方式：
</p>
<ul>
 <li>
  在
  <code>
   EXPLAIN
  </code>
  单词和真正的查询语句中间加上
  <code>
   FORMAT=JSON
  </code>
  。
 </li>
</ul>
<p>
 这样我们就可以得到一个
 <code>
  json
 </code>
 格式的执行计划，里边儿包含该计划花费的成本，比如这样：
</p>
<pre><code class="hljs language-bash">mysql&gt; EXPLAIN FORMAT=JSON SELECT * FROM s1 INNER JOIN s2 ON s1.key1 = s2.key2 WHERE s1.common_field = <span class="hljs-string">'a'</span>\G
*************************** 1. row ***************************

EXPLAIN: {
  <span class="hljs-string">"query_block"</span>: {
    <span class="hljs-string">"select_id"</span>: 1,     <span class="hljs-comment"># 整个查询语句只有1个SELECT关键字，该关键字对应的id号为1</span>
    <span class="hljs-string">"cost_info"</span>: {
      <span class="hljs-string">"query_cost"</span>: <span class="hljs-string">"3197.16"</span>   <span class="hljs-comment"># 整个查询的执行成本预计为3197.16</span>
    },
    <span class="hljs-string">"nested_loop"</span>: [    <span class="hljs-comment"># 几个表之间采用嵌套循环连接算法执行</span>
    
    <span class="hljs-comment"># 以下是参与嵌套循环连接算法的各个表的信息</span>
      {
        <span class="hljs-string">"table"</span>: {
          <span class="hljs-string">"table_name"</span>: <span class="hljs-string">"s1"</span>,   <span class="hljs-comment"># s1表是驱动表</span>
          <span class="hljs-string">"access_type"</span>: <span class="hljs-string">"ALL"</span>,     <span class="hljs-comment"># 访问方法为ALL，意味着使用全表扫描访问</span>
          <span class="hljs-string">"possible_keys"</span>: [    <span class="hljs-comment"># 可能使用的索引</span>
            <span class="hljs-string">"idx_key1"</span>
          ],
          <span class="hljs-string">"rows_examined_per_scan"</span>: 9688,   <span class="hljs-comment"># 查询一次s1表大致需要扫描9688条记录</span>
          <span class="hljs-string">"rows_produced_per_join"</span>: 968,    <span class="hljs-comment"># 驱动表s1的扇出是968</span>
          <span class="hljs-string">"filtered"</span>: <span class="hljs-string">"10.00"</span>,  <span class="hljs-comment"># condition filtering代表的百分比</span>
          <span class="hljs-string">"cost_info"</span>: {
            <span class="hljs-string">"read_cost"</span>: <span class="hljs-string">"1840.84"</span>,     <span class="hljs-comment"># 稍后解释</span>
            <span class="hljs-string">"eval_cost"</span>: <span class="hljs-string">"193.76"</span>,      <span class="hljs-comment"># 稍后解释</span>
            <span class="hljs-string">"prefix_cost"</span>: <span class="hljs-string">"2034.60"</span>,   <span class="hljs-comment"># 单次查询s1表总共的成本</span>
            <span class="hljs-string">"data_read_per_join"</span>: <span class="hljs-string">"1M"</span>  <span class="hljs-comment"># 读取的数据量</span>
          },
          <span class="hljs-string">"used_columns"</span>: [     <span class="hljs-comment"># 执行查询中涉及到的列</span>
            <span class="hljs-string">"id"</span>,
            <span class="hljs-string">"key1"</span>,
            <span class="hljs-string">"key2"</span>,
            <span class="hljs-string">"key3"</span>,
            <span class="hljs-string">"key_part1"</span>,
            <span class="hljs-string">"key_part2"</span>,
            <span class="hljs-string">"key_part3"</span>,
            <span class="hljs-string">"common_field"</span>
          ],
          
          <span class="hljs-comment"># 对s1表访问时针对单表查询的条件</span>
          <span class="hljs-string">"attached_condition"</span>: <span class="hljs-string">"((`xiaohaizi`.`s1`.`common_field` = 'a') and (`xiaohaizi`.`s1`.`key1` is not null))"</span>
        }
      },
      {
        <span class="hljs-string">"table"</span>: {
          <span class="hljs-string">"table_name"</span>: <span class="hljs-string">"s2"</span>,   <span class="hljs-comment"># s2表是被驱动表</span>
          <span class="hljs-string">"access_type"</span>: <span class="hljs-string">"ref"</span>,     <span class="hljs-comment"># 访问方法为ref，意味着使用索引等值匹配的方式访问</span>
          <span class="hljs-string">"possible_keys"</span>: [    <span class="hljs-comment"># 可能使用的索引</span>
            <span class="hljs-string">"idx_key2"</span>
          ],
          <span class="hljs-string">"key"</span>: <span class="hljs-string">"idx_key2"</span>,    <span class="hljs-comment"># 实际使用的索引</span>
          <span class="hljs-string">"used_key_parts"</span>: [   <span class="hljs-comment"># 使用到的索引列</span>
            <span class="hljs-string">"key2"</span>
          ],
          <span class="hljs-string">"key_length"</span>: <span class="hljs-string">"5"</span>,    <span class="hljs-comment"># key_len</span>
          <span class="hljs-string">"ref"</span>: [      <span class="hljs-comment"># 与key2列进行等值匹配的对象</span>
            <span class="hljs-string">"xiaohaizi.s1.key1"</span>
          ],
          <span class="hljs-string">"rows_examined_per_scan"</span>: 1,  <span class="hljs-comment"># 查询一次s2表大致需要扫描1条记录</span>
          <span class="hljs-string">"rows_produced_per_join"</span>: 968,    <span class="hljs-comment"># 被驱动表s2的扇出是968（由于后边没有多余的表进行连接，所以这个值也没啥用）</span>
          <span class="hljs-string">"filtered"</span>: <span class="hljs-string">"100.00"</span>,     <span class="hljs-comment"># condition filtering代表的百分比</span>
          
          <span class="hljs-comment"># s2表使用索引进行查询的搜索条件</span>
          <span class="hljs-string">"index_condition"</span>: <span class="hljs-string">"(`xiaohaizi`.`s1`.`key1` = `xiaohaizi`.`s2`.`key2`)"</span>,
          <span class="hljs-string">"cost_info"</span>: {
            <span class="hljs-string">"read_cost"</span>: <span class="hljs-string">"968.80"</span>,      <span class="hljs-comment"># 稍后解释</span>
            <span class="hljs-string">"eval_cost"</span>: <span class="hljs-string">"193.76"</span>,      <span class="hljs-comment"># 稍后解释</span>
            <span class="hljs-string">"prefix_cost"</span>: <span class="hljs-string">"3197.16"</span>,   <span class="hljs-comment"># 单次查询s1、多次查询s2表总共的成本</span>
            <span class="hljs-string">"data_read_per_join"</span>: <span class="hljs-string">"1M"</span>  <span class="hljs-comment"># 读取的数据量</span>
          },
          <span class="hljs-string">"used_columns"</span>: [     <span class="hljs-comment"># 执行查询中涉及到的列</span>
            <span class="hljs-string">"id"</span>,
            <span class="hljs-string">"key1"</span>,
            <span class="hljs-string">"key2"</span>,
            <span class="hljs-string">"key3"</span>,
            <span class="hljs-string">"key_part1"</span>,
            <span class="hljs-string">"key_part2"</span>,
            <span class="hljs-string">"key_part3"</span>,
            <span class="hljs-string">"common_field"</span>
          ]
        }
      }
    ]
  }
}
1 row <span class="hljs-keyword">in</span> <span class="hljs-built_in">set</span>, 2 warnings (0.00 sec)
</code></pre>
<p>
 我们使用
 <code>
  #
 </code>
 后边跟随注释的形式为大家解释了
 <code>
  EXPLAIN FORMAT=JSON
 </code>
 语句的输出内容，但是大家可能有疑问
 <code>
  "cost_info"
 </code>
 里边的成本看着怪怪的，它们是怎么计算出来的？先看
 <code>
  s1
 </code>
 表的
 <code>
  "cost_info"
 </code>
 部分：
</p>
<pre><code class="hljs language-json"><span class="hljs-attr">"cost_info"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span>
    <span class="hljs-attr">"read_cost"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"1840.84"</span><span class="hljs-punctuation">,</span>
    <span class="hljs-attr">"eval_cost"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"193.76"</span><span class="hljs-punctuation">,</span>
    <span class="hljs-attr">"prefix_cost"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"2034.60"</span><span class="hljs-punctuation">,</span>
    <span class="hljs-attr">"data_read_per_join"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"1M"</span>
<span class="hljs-punctuation">}</span>
</code></pre>
<ul>
 <li>
  <p>
   <code>
    read_cost
   </code>
   是由下边这两部分组成的：
  </p>
  <ul>
   <li>
    <code>
     IO
    </code>
    成本
   </li>
   <li>
    检测
    <code>
     rows × (1 - filter)
    </code>
    条记录的
    <code>
     CPU
    </code>
    成本
   </li>
  </ul>
  <pre><code class="hljs language-!">小贴士：

rows和filter都是我们前边介绍执行计划的输出列，在JSON格式的执行计划中，rows相当于rows_examined_per_scan，filtered名称不变。
</code></pre>
 </li>
 <li>
  <p>
   <code>
    eval_cost
   </code>
   是这样计算的：
  </p>
  <p>
   检测
   <code>
    rows × filter
   </code>
   条记录的成本。
  </p>
 </li>
 <li>
  <p>
   <code>
    prefix_cost
   </code>
   就是单独查询
   <code>
    s1
   </code>
   表的成本，也就是：
  </p>
  <p>
   <code>
    read_cost + eval_cost
   </code>
  </p>
 </li>
 <li>
  <p>
   <code>
    data_read_per_join
   </code>
   表示在此次查询中需要读取的数据量，我们就不多唠叨这个了。
  </p>
 </li>
</ul>
<pre><code class="hljs language-!">小贴士：

大家其实没必要关注MySQL为啥使用这么古怪的方式计算出read_cost和eval_cost，关注prefix_cost是查询s1表的成本就好了。
</code></pre>
<p>
 对于
 <code>
  s2
 </code>
 表的
 <code>
  "cost_info"
 </code>
 部分是这样的：
</p>
<pre><code class="hljs language-json"><span class="hljs-attr">"cost_info"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span>
    <span class="hljs-attr">"read_cost"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"968.80"</span><span class="hljs-punctuation">,</span>
    <span class="hljs-attr">"eval_cost"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"193.76"</span><span class="hljs-punctuation">,</span>
    <span class="hljs-attr">"prefix_cost"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"3197.16"</span><span class="hljs-punctuation">,</span>
    <span class="hljs-attr">"data_read_per_join"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"1M"</span>
<span class="hljs-punctuation">}</span>
</code></pre>
<p>
 由于
 <code>
  s2
 </code>
 表是被驱动表，所以可能被读取多次，这里的
 <code>
  read_cost
 </code>
 和
 <code>
  eval_cost
 </code>
 是访问多次
 <code>
  s2
 </code>
 表后累加起来的值，大家主要关注里边儿的
 <code>
  prefix_cost
 </code>
 的值代表的是整个连接查询预计的成本，也就是单次查询
 <code>
  s1
 </code>
 表和多次查询
 <code>
  s2
 </code>
 表后的成本的和，也就是：
</p>
<pre><code class="hljs language-ini">968.80 + 193.76 + <span class="hljs-attr">2034.60</span> = <span class="hljs-number">3197.16</span>
</code></pre>
<h2>
 Extented EXPLAIN
</h2>
<p>
 最后，设计
 <code>
  MySQL
 </code>
 的大叔还为我们留了个彩蛋，在我们使用
 <code>
  EXPLAIN
 </code>
 语句查看了某个查询的执行计划后，紧接着还可以使用
 <code>
  SHOW WARNINGS
 </code>
 语句查看与这个查询的执行计划有关的一些扩展信息，比如这样：
</p>
<pre><code class="hljs language-sql">mysql<span class="hljs-operator">&gt;</span> EXPLAIN <span class="hljs-keyword">SELECT</span> s1.key1, s2.key1 <span class="hljs-keyword">FROM</span> s1 <span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">JOIN</span> s2 <span class="hljs-keyword">ON</span> s1.key1 <span class="hljs-operator">=</span> s2.key1 <span class="hljs-keyword">WHERE</span> s2.common_field <span class="hljs-keyword">IS</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>;
<span class="hljs-operator">+</span><span class="hljs-comment">----+-------------+-------+------------+------+---------------+----------+---------+-------------------+------+----------+-------------+</span>
<span class="hljs-operator">|</span> id <span class="hljs-operator">|</span> select_type <span class="hljs-operator">|</span> <span class="hljs-keyword">table</span> <span class="hljs-operator">|</span> partitions <span class="hljs-operator">|</span> type <span class="hljs-operator">|</span> possible_keys <span class="hljs-operator">|</span> key      <span class="hljs-operator">|</span> key_len <span class="hljs-operator">|</span> <span class="hljs-keyword">ref</span>               <span class="hljs-operator">|</span> <span class="hljs-keyword">rows</span> <span class="hljs-operator">|</span> filtered <span class="hljs-operator">|</span> Extra       <span class="hljs-operator">|</span>
<span class="hljs-operator">+</span><span class="hljs-comment">----+-------------+-------+------------+------+---------------+----------+---------+-------------------+------+----------+-------------+</span>
<span class="hljs-operator">|</span>  <span class="hljs-number">1</span> <span class="hljs-operator">|</span> SIMPLE      <span class="hljs-operator">|</span> s2    <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>       <span class="hljs-operator">|</span> <span class="hljs-keyword">ALL</span>  <span class="hljs-operator">|</span> idx_key1      <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>     <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>    <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>              <span class="hljs-operator">|</span> <span class="hljs-number">9954</span> <span class="hljs-operator">|</span>    <span class="hljs-number">90.00</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">Using</span> <span class="hljs-keyword">where</span> <span class="hljs-operator">|</span>
<span class="hljs-operator">|</span>  <span class="hljs-number">1</span> <span class="hljs-operator">|</span> SIMPLE      <span class="hljs-operator">|</span> s1    <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>       <span class="hljs-operator">|</span> <span class="hljs-keyword">ref</span>  <span class="hljs-operator">|</span> idx_key1      <span class="hljs-operator">|</span> idx_key1 <span class="hljs-operator">|</span> <span class="hljs-number">303</span>     <span class="hljs-operator">|</span> xiaohaizi.s2.key1 <span class="hljs-operator">|</span>    <span class="hljs-number">1</span> <span class="hljs-operator">|</span>   <span class="hljs-number">100.00</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">Using</span> index <span class="hljs-operator">|</span>
<span class="hljs-operator">+</span><span class="hljs-comment">----+-------------+-------+------------+------+---------------+----------+---------+-------------------+------+----------+-------------+</span>
<span class="hljs-number">2</span> <span class="hljs-keyword">rows</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span>, <span class="hljs-number">1</span> warning (<span class="hljs-number">0.00</span> sec)

mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">SHOW</span> WARNINGS\G
<span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span> <span class="hljs-number">1.</span> <span class="hljs-type">row</span> <span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span>
  Level: Note
   Code: <span class="hljs-number">1003</span>
Message: <span class="hljs-comment">/* select#1 */</span> <span class="hljs-keyword">select</span> `xiaohaizi`.`s1`.`key1` <span class="hljs-keyword">AS</span> `key1`,`xiaohaizi`.`s2`.`key1` <span class="hljs-keyword">AS</span> `key1` <span class="hljs-keyword">from</span> `xiaohaizi`.`s1` <span class="hljs-keyword">join</span> `xiaohaizi`.`s2` <span class="hljs-keyword">where</span> ((`xiaohaizi`.`s1`.`key1` <span class="hljs-operator">=</span> `xiaohaizi`.`s2`.`key1`) <span class="hljs-keyword">and</span> (`xiaohaizi`.`s2`.`common_field` <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>))
<span class="hljs-number">1</span> <span class="hljs-type">row</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)
</code></pre>
<p>
 大家可以看到
 <code>
  SHOW WARNINGS
 </code>
 展示出来的信息有三个字段，分别是
 <code>
  Level
 </code>
 、
 <code>
  Code
 </code>
 、
 <code>
  Message
 </code>
 。我们最常见的就是
 <code>
  Code
 </code>
 为
 <code>
  1003
 </code>
 的信息，当
 <code>
  Code
 </code>
 值为
 <code>
  1003
 </code>
 时，
 <code>
  Message
 </code>
 字段展示的信息
 <span>
  类似于
 </span>
 查询优化器将我们的查询语句重写后的语句。比如我们上边的查询本来是一个左（外）连接查询，但是有一个
 <code>
  s2.common_field IS NOT NULL
 </code>
 的条件，着就会导致查询优化器把左（外）连接查询优化为内连接查询，从
 <code>
  SHOW WARNINGS
 </code>
 的
 <code>
  Message
 </code>
 字段也可以看出来，原本的
 <code>
  LEFT JOIN
 </code>
 已经变成了
 <code>
  JOIN
 </code>
 。
</p>
<p>
 但是大家一定要注意，我们说
 <code>
  Message
 </code>
 字段展示的信息
 <span>
  类似于
 </span>
 查询优化器将我们的查询语句重写后的语句，并不是等价于，也就是说
 <code>
  Message
 </code>
 字段展示的信息并不是标准的查询语句，在很多情况下并不能直接拿到黑框框中运行，它只能作为帮助我们理解查
 <code>
  MySQL
 </code>
 将如何执行查询语句的一个参考依据而已。
</p>
</div>

</div>
</body>
</html>
